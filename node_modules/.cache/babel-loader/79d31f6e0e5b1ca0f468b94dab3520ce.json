{"ast":null,"code":"var _jsxFileName = \"/Users/chloephan/stockify/src/StockCharts.js\";\nimport React, { Component } from \"react\";\nimport { render } from \"react-dom\";\nimport Highcharts from \"highcharts/highstock\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport { getMicrosoftDataFromApi } from '../api/index';\n\nclass StockCharts extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: null\n    };\n  }\n\n  async componentDidMount() {\n    var data = await getMicrosoftDataFromApi();\n    console.log(data);\n    this.setState({\n      data: data\n    });\n  }\n\n  render() {\n    if (!this.state.data) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      });\n    }\n\n    const data = this.state.data;\n    var ohlc = [],\n        volume = [],\n        dataLength = data.length,\n        groupingUnits = [[\"week\", // unit name\n    [1] // allowed multiples\n    ], [\"month\", [1, 2, 3, 4, 6]]],\n        i = 0;\n\n    for (i; i < dataLength; i += 1) {\n      ohlc.push([data[i][0], // the date\n      data[i][1], // open\n      data[i][2], // high\n      data[i][3], // low\n      data[i][4] // close\n      ]);\n      volume.push([data[i][0], // the date\n      data[i][5] // the volume\n      ]);\n    }\n\n    const options = {\n      rangeSelector: {\n        selected: 1\n      },\n      title: {\n        text: \"MSFT Historical\"\n      },\n      yAxis: [{\n        labels: {\n          align: \"right\",\n          x: -3\n        },\n        title: {\n          text: \"OHLC\"\n        },\n        height: \"60%\",\n        lineWidth: 2,\n        resize: {\n          enabled: true\n        }\n      }, {\n        labels: {\n          align: \"right\",\n          x: -3\n        },\n        title: {\n          text: \"Volume\"\n        },\n        top: \"65%\",\n        height: \"35%\",\n        offset: 0,\n        lineWidth: 2\n      }],\n      tooltip: {\n        split: true\n      },\n      series: [{\n        type: \"candlestick\",\n        name: \"MSFT\",\n        data: ohlc,\n        dataGrouping: {\n          units: groupingUnits\n        }\n      }, {\n        type: \"line\",\n        name: \"Volume\",\n        data: volume,\n        yAxis: 1,\n        dataGrouping: {\n          units: groupingUnits\n        }\n      }]\n    };\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(HighchartsReact, {\n      highcharts: Highcharts,\n      constructorType: \"stockChart\",\n      options: options,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }));\n  }\n\n}\n\n; // const StockCharts = Highcharts.getJSON('https://www.highcharts.com/samples/data/aapl-ohlcv.json', function (data) {\n//     // split the data set into ohlc and volume\n//     var ohlc = [],\n//         volume = [],\n//         dataLength = data.length,\n//         i = 0;\n//     for (i; i < dataLength; i += 1) {\n//         ohlc.push([\n//             data[i][0], // the date\n//             data[i][1], // open\n//             data[i][2], // high\n//             data[i][3], // low\n//             data[i][4] // close\n//         ]);\n//         volume.push([\n//             data[i][0], // the date\n//             data[i][5] // the volume\n//         ]);\n//     }\n//     Highcharts.stockChart('container', {\n//         yAxis: [{\n//             labels: {\n//                 align: 'left'\n//             },\n//             height: '80%',\n//             resize: {\n//                 enabled: true\n//             }\n//         }, {\n//             labels: {\n//                 align: 'left'\n//             },\n//             top: '80%',\n//             height: '20%',\n//             offset: 0\n//         }],\n//         tooltip: {\n//             shape: 'square',\n//             headerShape: 'callout',\n//             borderWidth: 0,\n//             shadow: false,\n//             positioner: function (width, height, point) {\n//                 var chart = this.chart,\n//                     position;\n//                 if (point.isHeader) {\n//                     position = {\n//                         x: Math.max(\n//                             // Left side limit\n//                             chart.plotLeft,\n//                             Math.min(\n//                                 point.plotX + chart.plotLeft - width / 2,\n//                                 // Right side limit\n//                                 chart.chartWidth - width - chart.marginRight\n//                             )\n//                         ),\n//                         y: point.plotY\n//                     };\n//                 } else {\n//                     position = {\n//                         x: point.series.chart.plotLeft,\n//                         y: point.series.yAxis.top - chart.plotTop\n//                     };\n//                 }\n//                 return position;\n//             }\n//         },\n//         series: [{\n//             type: 'ohlc',\n//             id: 'aapl-ohlc',\n//             name: 'AAPL Stock Price',\n//             data: ohlc\n//         }, {\n//             type: 'column',\n//             id: 'aapl-volume',\n//             name: 'AAPL Volume',\n//             data: volume,\n//             yAxis: 1\n//         }],\n//         responsive: {\n//             rules: [{\n//                 condition: {\n//                     maxWidth: 800\n//                 },\n//                 chartOptions: {\n//                     rangeSelector: {\n//                         inputEnabled: false\n//                     }\n//                 }\n//             }]\n//         }\n//     });\n// });\n\nexport default StockCharts;","map":{"version":3,"sources":["/Users/chloephan/stockify/src/StockCharts.js"],"names":["React","Component","render","Highcharts","HighchartsReact","getMicrosoftDataFromApi","StockCharts","state","data","componentDidMount","console","log","setState","ohlc","volume","dataLength","length","groupingUnits","i","push","options","rangeSelector","selected","title","text","yAxis","labels","align","x","height","lineWidth","resize","enabled","top","offset","tooltip","split","series","type","name","dataGrouping","units"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,OAAOC,eAAP,MAA4B,2BAA5B;AACA,SAASC,uBAAT,QAAwC,cAAxC;;AAEA,MAAMC,WAAN,SAA0BL,SAA1B,CAAoC;AAAA;AAAA;AAAA,SAChCM,KADgC,GACxB;AACJC,MAAAA,IAAI,EAAE;AADF,KADwB;AAAA;;AAMhC,QAAMC,iBAAN,GAA0B;AACtB,QAAID,IAAI,GAAG,MAAMH,uBAAuB,EAAxC;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACA,SAAKI,QAAL,CAAc;AACVJ,MAAAA,IAAI,EAAEA;AADI,KAAd;AAGH;;AAGDN,EAAAA,MAAM,GAAG;AACL,QAAI,CAAC,KAAKK,KAAL,CAAWC,IAAhB,EAAsB;AAClB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH;;AACD,UAAMA,IAAI,GAAG,KAAKD,KAAL,CAAWC,IAAxB;AACA,QAAIK,IAAI,GAAG,EAAX;AAAA,QACIC,MAAM,GAAG,EADb;AAAA,QAEIC,UAAU,GAAGP,IAAI,CAACQ,MAFtB;AAAA,QAGIC,aAAa,GAAG,CACZ,CACI,MADJ,EACY;AACR,KAAC,CAAD,CAFJ,CAEQ;AAFR,KADY,EAKZ,CAAC,OAAD,EAAU,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAAV,CALY,CAHpB;AAAA,QAUIC,CAAC,GAAG,CAVR;;AAYA,SAAKA,CAAL,EAAQA,CAAC,GAAGH,UAAZ,EAAwBG,CAAC,IAAI,CAA7B,EAAgC;AAC5BL,MAAAA,IAAI,CAACM,IAAL,CAAU,CACNX,IAAI,CAACU,CAAD,CAAJ,CAAQ,CAAR,CADM,EACM;AACZV,MAAAA,IAAI,CAACU,CAAD,CAAJ,CAAQ,CAAR,CAFM,EAEM;AACZV,MAAAA,IAAI,CAACU,CAAD,CAAJ,CAAQ,CAAR,CAHM,EAGM;AACZV,MAAAA,IAAI,CAACU,CAAD,CAAJ,CAAQ,CAAR,CAJM,EAIM;AACZV,MAAAA,IAAI,CAACU,CAAD,CAAJ,CAAQ,CAAR,CALM,CAKK;AALL,OAAV;AAQAJ,MAAAA,MAAM,CAACK,IAAP,CAAY,CACRX,IAAI,CAACU,CAAD,CAAJ,CAAQ,CAAR,CADQ,EACI;AACZV,MAAAA,IAAI,CAACU,CAAD,CAAJ,CAAQ,CAAR,CAFQ,CAEG;AAFH,OAAZ;AAIH;;AACD,UAAME,OAAO,GAAG;AACZC,MAAAA,aAAa,EAAE;AACXC,QAAAA,QAAQ,EAAE;AADC,OADH;AAKZC,MAAAA,KAAK,EAAE;AACHC,QAAAA,IAAI,EAAE;AADH,OALK;AASZC,MAAAA,KAAK,EAAE,CACH;AACIC,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAE,OADH;AAEJC,UAAAA,CAAC,EAAE,CAAC;AAFA,SADZ;AAKIL,QAAAA,KAAK,EAAE;AACHC,UAAAA,IAAI,EAAE;AADH,SALX;AAQIK,QAAAA,MAAM,EAAE,KARZ;AASIC,QAAAA,SAAS,EAAE,CATf;AAUIC,QAAAA,MAAM,EAAE;AACJC,UAAAA,OAAO,EAAE;AADL;AAVZ,OADG,EAeH;AACIN,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAE,OADH;AAEJC,UAAAA,CAAC,EAAE,CAAC;AAFA,SADZ;AAKIL,QAAAA,KAAK,EAAE;AACHC,UAAAA,IAAI,EAAE;AADH,SALX;AAQIS,QAAAA,GAAG,EAAE,KART;AASIJ,QAAAA,MAAM,EAAE,KATZ;AAUIK,QAAAA,MAAM,EAAE,CAVZ;AAWIJ,QAAAA,SAAS,EAAE;AAXf,OAfG,CATK;AAuCZK,MAAAA,OAAO,EAAE;AACLC,QAAAA,KAAK,EAAE;AADF,OAvCG;AA2CZC,MAAAA,MAAM,EAAE,CACJ;AACIC,QAAAA,IAAI,EAAE,aADV;AAEIC,QAAAA,IAAI,EAAE,MAFV;AAGI/B,QAAAA,IAAI,EAAEK,IAHV;AAII2B,QAAAA,YAAY,EAAE;AACVC,UAAAA,KAAK,EAAExB;AADG;AAJlB,OADI,EASJ;AACIqB,QAAAA,IAAI,EAAE,MADV;AAEIC,QAAAA,IAAI,EAAE,QAFV;AAGI/B,QAAAA,IAAI,EAAEM,MAHV;AAIIW,QAAAA,KAAK,EAAE,CAJX;AAKIe,QAAAA,YAAY,EAAE;AACVC,UAAAA,KAAK,EAAExB;AADG;AALlB,OATI;AA3CI,KAAhB;AA+DA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,eAAD;AACI,MAAA,UAAU,EAAEd,UADhB;AAEI,MAAA,eAAe,EAAE,YAFrB;AAGI,MAAA,OAAO,EAAEiB,OAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ;AAQH;;AArH+B;;AAsHnC,C,CAED;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAed,WAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { render } from \"react-dom\";\nimport Highcharts from \"highcharts/highstock\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport { getMicrosoftDataFromApi } from '../api/index';\n\nclass StockCharts extends Component {\n    state = {\n        data: null\n    }\n\n\n    async componentDidMount() {\n        var data = await getMicrosoftDataFromApi();\n        console.log(data);\n        this.setState({\n            data: data\n        })\n    }\n\n\n    render() {\n        if (!this.state.data) {\n            return <div />\n        }\n        const data = this.state.data\n        var ohlc = [],\n            volume = [],\n            dataLength = data.length,\n            groupingUnits = [\n                [\n                    \"week\", // unit name\n                    [1] // allowed multiples\n                ],\n                [\"month\", [1, 2, 3, 4, 6]]\n            ],\n            i = 0;\n\n        for (i; i < dataLength; i += 1) {\n            ohlc.push([\n                data[i][0], // the date\n                data[i][1], // open\n                data[i][2], // high\n                data[i][3], // low\n                data[i][4] // close\n            ]);\n\n            volume.push([\n                data[i][0], // the date\n                data[i][5] // the volume\n            ]);\n        }\n        const options = {\n            rangeSelector: {\n                selected: 1\n            },\n\n            title: {\n                text: \"MSFT Historical\"\n            },\n\n            yAxis: [\n                {\n                    labels: {\n                        align: \"right\",\n                        x: -3\n                    },\n                    title: {\n                        text: \"OHLC\"\n                    },\n                    height: \"60%\",\n                    lineWidth: 2,\n                    resize: {\n                        enabled: true\n                    }\n                },\n                {\n                    labels: {\n                        align: \"right\",\n                        x: -3\n                    },\n                    title: {\n                        text: \"Volume\"\n                    },\n                    top: \"65%\",\n                    height: \"35%\",\n                    offset: 0,\n                    lineWidth: 2\n                }\n            ],\n\n            tooltip: {\n                split: true\n            },\n\n            series: [\n                {\n                    type: \"candlestick\",\n                    name: \"MSFT\",\n                    data: ohlc,\n                    dataGrouping: {\n                        units: groupingUnits\n                    }\n                },\n                {\n                    type: \"line\",\n                    name: \"Volume\",\n                    data: volume,\n                    yAxis: 1,\n                    dataGrouping: {\n                        units: groupingUnits\n                    }\n                }\n            ]\n        };\n        return (\n            <div>\n                <HighchartsReact\n                    highcharts={Highcharts}\n                    constructorType={\"stockChart\"}\n                    options={options}\n                />\n            </div>);\n    }\n};\n\n// const StockCharts = Highcharts.getJSON('https://www.highcharts.com/samples/data/aapl-ohlcv.json', function (data) {\n\n//     // split the data set into ohlc and volume\n//     var ohlc = [],\n//         volume = [],\n//         dataLength = data.length,\n//         i = 0;\n\n//     for (i; i < dataLength; i += 1) {\n//         ohlc.push([\n//             data[i][0], // the date\n//             data[i][1], // open\n//             data[i][2], // high\n//             data[i][3], // low\n//             data[i][4] // close\n//         ]);\n\n//         volume.push([\n//             data[i][0], // the date\n//             data[i][5] // the volume\n//         ]);\n//     }\n\n//     Highcharts.stockChart('container', {\n//         yAxis: [{\n//             labels: {\n//                 align: 'left'\n//             },\n//             height: '80%',\n//             resize: {\n//                 enabled: true\n//             }\n//         }, {\n//             labels: {\n//                 align: 'left'\n//             },\n//             top: '80%',\n//             height: '20%',\n//             offset: 0\n//         }],\n//         tooltip: {\n//             shape: 'square',\n//             headerShape: 'callout',\n//             borderWidth: 0,\n//             shadow: false,\n//             positioner: function (width, height, point) {\n//                 var chart = this.chart,\n//                     position;\n\n//                 if (point.isHeader) {\n//                     position = {\n//                         x: Math.max(\n//                             // Left side limit\n//                             chart.plotLeft,\n//                             Math.min(\n//                                 point.plotX + chart.plotLeft - width / 2,\n//                                 // Right side limit\n//                                 chart.chartWidth - width - chart.marginRight\n//                             )\n//                         ),\n//                         y: point.plotY\n//                     };\n//                 } else {\n//                     position = {\n//                         x: point.series.chart.plotLeft,\n//                         y: point.series.yAxis.top - chart.plotTop\n//                     };\n//                 }\n\n//                 return position;\n//             }\n//         },\n//         series: [{\n//             type: 'ohlc',\n//             id: 'aapl-ohlc',\n//             name: 'AAPL Stock Price',\n//             data: ohlc\n//         }, {\n//             type: 'column',\n//             id: 'aapl-volume',\n//             name: 'AAPL Volume',\n//             data: volume,\n//             yAxis: 1\n//         }],\n//         responsive: {\n//             rules: [{\n//                 condition: {\n//                     maxWidth: 800\n//                 },\n//                 chartOptions: {\n//                     rangeSelector: {\n//                         inputEnabled: false\n//                     }\n//                 }\n//             }]\n//         }\n//     });\n// });\n\nexport default StockCharts;\n\n\n\n"]},"metadata":{},"sourceType":"module"}