{"ast":null,"code":"import { TIME_SERIES_DAILY_KEY, TIME_SERIES_DAILY_OPEN_KEY, TIME_SERIES_DAILY_HIGH_KEY, TIME_SERIES_DAILY_LOW_KEY, TIME_SERIES_DAILY_CLOSE_KEY, TIME_SERIES_DAILY_VOLUME_KEY } from \"../data/constant\";\nconst alphaVantageKey = process.env.REACT_APP_ALPHA_VANTAGE_KEY; // const microsoftData = require(\"../data/msft-data.json\");\n\nconst createParsedDataObject = (rawRecord, date, openKey, highKey, lowKey, closeKey, volumeKey) => {\n  return [Date.parse(date), round(rawRecord[openKey], 2), round(rawRecord[highKey], 2), round(rawRecord[lowKey], 2), round(rawRecord[closeKey], 2), round(rawRecord[volumeKey], 2)];\n};\n\nconst parseRawData = (rawData, numberOfRecords, dataKey, openKey, highKey, lowKey, closeKey, volumeKey) => {\n  const seriesData = rawData[dataKey];\n  const parsedData = [];\n  let recordCount = 0;\n\n  for (const date in seriesData) {\n    if (recordCount >= numberOfRecords + 1) {\n      break;\n    }\n\n    parsedData.push(createParsedDataObject(seriesData[date], date, openKey, highKey, lowKey, closeKey, volumeKey));\n    recordCount++;\n  }\n\n  return parsedData.slice(0, numberOfRecords);\n}; // const orderByDate = (dayData, reverseChronological = false) => {\n//     return dayData.sort((a, b) => {\n//         return reverseChronological\n//             ? new Date(b.date) - new Date(a.date)\n//             : new Date(a.date) - new Date(b.date);\n//     });\n// };\n\n\nconst parseTimeSeriesData = (rawData, numberOfRecords) => {\n  return parseRawData(rawData, numberOfRecords, TIME_SERIES_DAILY_KEY, TIME_SERIES_DAILY_OPEN_KEY, TIME_SERIES_DAILY_HIGH_KEY, TIME_SERIES_DAILY_LOW_KEY, TIME_SERIES_DAILY_CLOSE_KEY, TIME_SERIES_DAILY_VOLUME_KEY);\n}; // export const getMicrosoftData = () => {\n//     return parseTimeSeriesData(microsoftData, 6);\n// };\n\n\nexport const getMicrosoftDataFromApi = async () => {\n  const response = await fetch(`https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=AAPL&outputsize=compact&apikey=${alphaVantageKey}`);\n  const data = await response.json();\n  return parseTimeSeriesData(data, 50);\n};\nexport const round = (number, decimalPlaces) => {\n  return Math.round(number * Math.pow(10, decimalPlaces)) / Math.pow(10, decimalPlaces);\n};","map":{"version":3,"sources":["/Users/chloephan/stockify/src/api/index.js"],"names":["TIME_SERIES_DAILY_KEY","TIME_SERIES_DAILY_OPEN_KEY","TIME_SERIES_DAILY_HIGH_KEY","TIME_SERIES_DAILY_LOW_KEY","TIME_SERIES_DAILY_CLOSE_KEY","TIME_SERIES_DAILY_VOLUME_KEY","alphaVantageKey","process","env","REACT_APP_ALPHA_VANTAGE_KEY","createParsedDataObject","rawRecord","date","openKey","highKey","lowKey","closeKey","volumeKey","Date","parse","round","parseRawData","rawData","numberOfRecords","dataKey","seriesData","parsedData","recordCount","push","slice","parseTimeSeriesData","getMicrosoftDataFromApi","response","fetch","data","json","number","decimalPlaces","Math","pow"],"mappings":"AAAA,SACIA,qBADJ,EAEIC,0BAFJ,EAGIC,0BAHJ,EAIIC,yBAJJ,EAKIC,2BALJ,EAMIC,4BANJ,QAOO,kBAPP;AASA,MAAMC,eAAe,GAAGC,OAAO,CAACC,GAAR,CAAYC,2BAApC,C,CACA;;AAEA,MAAMC,sBAAsB,GAAG,CAACC,SAAD,EAAYC,IAAZ,EAAkBC,OAAlB,EAA2BC,OAA3B,EAAoCC,MAApC,EAA4CC,QAA5C,EAAsDC,SAAtD,KAAoE;AAC/F,SAAO,CAACC,IAAI,CAACC,KAAL,CAAWP,IAAX,CAAD,EACHQ,KAAK,CAACT,SAAS,CAACE,OAAD,CAAV,EAAqB,CAArB,CADF,EAEHO,KAAK,CAACT,SAAS,CAACG,OAAD,CAAV,EAAqB,CAArB,CAFF,EAGHM,KAAK,CAACT,SAAS,CAACI,MAAD,CAAV,EAAoB,CAApB,CAHF,EAIHK,KAAK,CAACT,SAAS,CAACK,QAAD,CAAV,EAAsB,CAAtB,CAJF,EAKHI,KAAK,CAACT,SAAS,CAACM,SAAD,CAAV,EAAuB,CAAvB,CALF,CAAP;AAOH,CARD;;AAUA,MAAMI,YAAY,GAAG,CACjBC,OADiB,EAEjBC,eAFiB,EAGjBC,OAHiB,EAIjBX,OAJiB,EAKjBC,OALiB,EAMjBC,MANiB,EAOjBC,QAPiB,EAQjBC,SARiB,KAShB;AACD,QAAMQ,UAAU,GAAGH,OAAO,CAACE,OAAD,CAA1B;AACA,QAAME,UAAU,GAAG,EAAnB;AACA,MAAIC,WAAW,GAAG,CAAlB;;AACA,OAAK,MAAMf,IAAX,IAAmBa,UAAnB,EAA+B;AAC3B,QAAIE,WAAW,IAAIJ,eAAe,GAAG,CAArC,EAAwC;AACpC;AACH;;AACDG,IAAAA,UAAU,CAACE,IAAX,CACIlB,sBAAsB,CAAEe,UAAU,CAACb,IAAD,CAAZ,EAAqBA,IAArB,EAA2BC,OAA3B,EAAoCC,OAApC,EAA6CC,MAA7C,EAAqDC,QAArD,EAA+DC,SAA/D,CAD1B;AAGAU,IAAAA,WAAW;AACd;;AAED,SAAOD,UAAU,CAACG,KAAX,CAAiB,CAAjB,EAAoBN,eAApB,CAAP;AACH,CAxBD,C,CA0BA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMO,mBAAmB,GAAG,CAACR,OAAD,EAAUC,eAAV,KAA8B;AACtD,SAAOF,YAAY,CACfC,OADe,EAEfC,eAFe,EAGfvB,qBAHe,EAIfC,0BAJe,EAKfC,0BALe,EAMfC,yBANe,EAOfC,2BAPe,EAQfC,4BARe,CAAnB;AAUH,CAXD,C,CAaA;AACA;AACA;;;AAGA,OAAO,MAAM0B,uBAAuB,GAAG,YAAY;AAC/C,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CACvB,sGAAqG3B,eAAgB,EAD9F,CAA5B;AAGA,QAAM4B,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACA,SAAOL,mBAAmB,CAACI,IAAD,EAAO,EAAP,CAA1B;AACH,CANM;AAQP,OAAO,MAAMd,KAAK,GAAG,CAACgB,MAAD,EAASC,aAAT,KAA2B;AAC5C,SACEC,IAAI,CAAClB,KAAL,CAAWgB,MAAM,GAAGE,IAAI,CAACC,GAAL,CAAS,EAAT,EAAaF,aAAb,CAApB,IACAC,IAAI,CAACC,GAAL,CAAS,EAAT,EAAaF,aAAb,CAFF;AAID,CALI","sourcesContent":["import {\n    TIME_SERIES_DAILY_KEY,\n    TIME_SERIES_DAILY_OPEN_KEY,\n    TIME_SERIES_DAILY_HIGH_KEY,\n    TIME_SERIES_DAILY_LOW_KEY,\n    TIME_SERIES_DAILY_CLOSE_KEY,\n    TIME_SERIES_DAILY_VOLUME_KEY\n} from \"../data/constant\";\n\nconst alphaVantageKey = process.env.REACT_APP_ALPHA_VANTAGE_KEY;\n// const microsoftData = require(\"../data/msft-data.json\");\n\nconst createParsedDataObject = (rawRecord, date, openKey, highKey, lowKey, closeKey, volumeKey) => {\n    return [Date.parse(date),\n        round(rawRecord[openKey], 2),\n        round(rawRecord[highKey], 2),\n        round(rawRecord[lowKey], 2),\n        round(rawRecord[closeKey], 2),\n        round(rawRecord[volumeKey], 2),\n        ];\n};\n\nconst parseRawData = (\n    rawData,\n    numberOfRecords,\n    dataKey,\n    openKey,\n    highKey,\n    lowKey,\n    closeKey,\n    volumeKey,\n) => {\n    const seriesData = rawData[dataKey];\n    const parsedData = [];\n    let recordCount = 0;\n    for (const date in seriesData) {\n        if (recordCount >= numberOfRecords + 1) {\n            break;\n        }\n        parsedData.push(\n            createParsedDataObject((seriesData[date]), date, openKey, highKey, lowKey, closeKey, volumeKey)\n        );\n        recordCount++;\n    }\n\n    return parsedData.slice(0, numberOfRecords);\n};\n\n// const orderByDate = (dayData, reverseChronological = false) => {\n//     return dayData.sort((a, b) => {\n//         return reverseChronological\n//             ? new Date(b.date) - new Date(a.date)\n//             : new Date(a.date) - new Date(b.date);\n//     });\n// };\n\nconst parseTimeSeriesData = (rawData, numberOfRecords) => {\n    return parseRawData(\n        rawData,\n        numberOfRecords,\n        TIME_SERIES_DAILY_KEY,\n        TIME_SERIES_DAILY_OPEN_KEY,\n        TIME_SERIES_DAILY_HIGH_KEY,\n        TIME_SERIES_DAILY_LOW_KEY,\n        TIME_SERIES_DAILY_CLOSE_KEY,\n        TIME_SERIES_DAILY_VOLUME_KEY\n    );\n};\n\n// export const getMicrosoftData = () => {\n//     return parseTimeSeriesData(microsoftData, 6);\n// };\n\n\nexport const getMicrosoftDataFromApi = async () => {\n    const response = await fetch(\n        `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=AAPL&outputsize=compact&apikey=${alphaVantageKey}`\n    );\n    const data = await response.json();\n    return parseTimeSeriesData(data, 50);\n};\n\nexport const round = (number, decimalPlaces) => {\n    return (\n      Math.round(number * Math.pow(10, decimalPlaces)) /\n      Math.pow(10, decimalPlaces)\n    );\n  };\n  "]},"metadata":{},"sourceType":"module"}